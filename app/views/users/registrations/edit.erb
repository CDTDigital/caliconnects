<main class="user">

  <div class="user__title">
    Welcome Back
  </div>

  <div class="user__detail">
    You can change your contact information and location preferences here.
  </div>

  <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: {method: :put}) do |f| %>
      <%= devise_error_messages! %>

      <div class="user__medium-title">Update Contact Information</div>
      <div class="user__box-area">
        <div class="user__label">
          <%= f.label :email, class: "user__label-title" %>
          <div class="user__label-required">Required</div>
        </div>
        <%= f.email_field :email, autofocus: true, class: "user__input" %>
      </div>

      <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
          <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
      <% end %>

      <div class="user__box-area">
        <div class="user__label">
          <%= f.label :phone, class: "user__label-title" %>
          <div class="user__label-required">Required</div>
        </div>
        <%= f.telephone_field :phone, maxlength: 10, class: "user__input" %>
      </div>

      <div class="user__medium-title">Location Preferences</div>

      <div class="user__box-area">
        <div class="user__label">
          <%= label_tag :address, nil, class: "user__label-title" %>
          <div class="user__label-required">Required</div>
        </div>
        <%= text_field_tag :address, (@user.addresses.first.full_address if @user.addresses.first), id: "autocomplete", onFocus: "geolocate()", class: "user__input" %>
      </div>

      <table id="address" class="signup-address-table">
        <tr>
          <td class="label">Street address</td>
          <td class="slimField"><input class="field" name="street" id="street_number"></input></td>
          <td class="wideField" colspan="2"><input class="field" name="route" id="route"></input></td>
        </tr>
        <tr>
          <td class="label">City</td>
          <td class="wideField" colspan="3"><input class="field" name="city" id="locality"></input></td>
        </tr>
        <tr>
          <td class="label">State</td>
          <td class="slimField"><input class="field" name="state" id="administrative_area_level_1"></input></td>
          <td class="label">Zip code</td>
          <td class="wideField"><input class="field" name="zipcode" id="postal_code"></input></td>
        </tr>
        <tr>
          <td class="label">Country</td>
          <td class="wideField" colspan="3"><input class="field" id="country"></input></td>
        </tr>
      </table>

      <div class="actions">
        <%= f.submit "Save" %>
      </div>

  <% end %>

  <%= button_to "Cancel my account", registration_path(resource_name), data: {confirm: "Are you sure?"}, method: :delete, class: "usa-button-secondary" %>

</main>

<script>
    // This example displays an address form, using the autocomplete feature
    // of the Google Places API to help users fill in the information.

    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
            document.getElementById(component).value = '';
            document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                document.getElementById(addressType).value = val;
            }
        }
    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_KEY"] %>&libraries=places&callback=initAutocomplete" async defer></script>

